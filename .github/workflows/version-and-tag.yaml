name: github-release
on:
  workflow_call:
    inputs: 
      node:
        type: boolean
        required: false
      regexPatches:
        type: string
        required: false
      rust:
        type: boolean
        required: false
        default: false
      yqPatches:
        type: string
        required: false
      useDeployKey:
        type: boolean
        required: false
        default: false
    secrets:
      # this workflow creates a tag, which can trigger other workflows
      # so we need to use a deploy key - GITHUB_TOKEN, the default for checkout, does not allow cascade of workflows to prevent people from doing it by accident
      # https://docs.github.com/en/actions/security-guides/virtual-environments-for-github-hosted-runners/using-the-github_token-in-a-workflow#permissions-for-the-github_token
      DEPLOY_KEY:
        required: false
    
jobs:

  release:
    name: Github Release
    runs-on: ubuntu-latest
            
    permissions:
      packages: write
      contents: write

    steps:

    - name: Checkout
      if: ${{ !inputs.useDeployKey }}
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        fetch-depth: 0

    - name: Checkout
      if: inputs.useDeployKey
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        fetch-depth: 0
        ssh-key: ${{ secrets.DEPLOY_KEY }}

    - name: fetch tags
      run: |
        git fetch --tags

    - name: Get current version tag
      id: current
      run: |
        if git rev-parse --git-dir > /dev/null 2>&1; then
          CURRENT=$(git tag --list 'v*' --sort=-version:refname | head -n1)
          CURRENT=${CURRENT:-v0.0.0}  # Defaults if CURRENT is empty
        else
          CURRENT="v0.0.0"
        fi
        CURRENT=${CURRENT#v}
        echo "version=$CURRENT" >> $GITHUB_OUTPUT

    - name: Show version calculation info (for humans)
      uses: harmony-labs/action-vnext@033f63c2425b27129d93e809d16c508154095c8a # v0.5.0
      env:
        LOG_LEVEL: debug

    - name: Compute next version using action-vnext
      id: next
      uses: harmony-labs/action-vnext@033f63c2425b27129d93e809d16c508154095c8a # v0.5.0

    - name: Gate
      id: gate
      run: |
        echo "Current version: ${{ steps.current.outputs.version }}"
        echo "Next version: ${{ steps.next.outputs.version }}"
        echo "Continue?: ${{ steps.current.outputs.version != steps.next.outputs.version }}"
        echo "continue=${{ steps.current.outputs.version != steps.next.outputs.version }}" >> $GITHUB_OUTPUT
      
    - name: Node package version bump
      if: inputs.node && steps.gate.outputs.continue == 'true'
      run: npm version ${{ steps.next.outputs.version }} --git-tag-version false

    # parse yqPatches yaml input - the key "patches" is required and is an array of objects
    # these objects contain the keys filePath, selector, and value
    # for each object, run yq to update the file at filePath with the value at selector to the value
    # example:
    # yqPatches: |
    #   patches:
    #     - filePath: .gitops/deploy/helm/values.yaml
    #       selector: .image.tag
    #     - filePath: .gitops/deploy/helm/Chart.yaml
    #       selector: .version
    #     - filePath: config.yaml
    #       selector: .spec.package
    #       valuePrefix: ghcr.io/org/package:
    #     - filePath: config.yaml
    #       selector: .spec.package
    #       valuePrefix: v
    - name: Apply YQ Patches (Optional)
      if: inputs.yqPatches && steps.gate.outputs.continue == 'true'
      run: |
        echo "Applying yq patches..."

        mkdir -p .tmp
        touch .tmp/yq-patches.yaml
        echo "${{ inputs.yqPatches }}" >> .tmp/yq-patches.yaml

        echo "TEMP FILE:"
        cat .tmp/yq-patches.yaml

        while IFS=$'\t' read -r filePath selector valuePrefix _; do

          echo "\nfilePath:  $filePath"
          echo "selector: $selector"
          echo "valuePrefix:  $valuePrefix"

          value=$(echo "${valuePrefix}${{ steps.next.outputs.version }}")

          # remove wrapping quotes from around $selector
          selector=$(echo $selector | sed 's/^"\(.*\)"$/\1/')

          echo "Running: yq -i '${selector} = \"${value}\"' ${filePath}\n\n"
          yq -i "${selector} = \"${value}\"" ${filePath}

        done < <(yq e '.patches[] | [.filePath, .selector, .valuePrefix] | @tsv' .tmp/yq-patches.yaml | sed 's/""/"/g' )

        rm .tmp/yq-patches.yaml

    # parse regexPatches yaml input - the key "patches" is required and is an array of objects
    # these objects contain the keys filePath, selector, and value
    # for each object, run yq to update the file at filePath with the value at selector to the value
    # example:
    # regexPatches: |
    #   patches:
    #     - filePath: package/composition.yaml
    #       regex: /ghcr.io/org-name/package-name:(.*)/g
    #       valuePrefix: ghcr.io/org-name/package-name:v
    - name: Apply Regex Patches (Optional)
      if: inputs.regexPatches && steps.gate.outputs.continue == 'true'
      run: |
        echo "Applying regex patches..."

        mkdir -p .tmp
        touch .tmp/regex-patches.yaml
        echo "${{ inputs.regexPatches }}" > .tmp/regex-patches.yaml

        echo "TEMP FILE:"
        cat .tmp/regex-patches.yaml

        while IFS=$'\t' read -r filePath regex valuePrefix _; do

          value=$(echo "${valuePrefix}${{ steps.next.outputs.version }}")

          # remove wrapping quotes from around $regex
          regex=$(echo $regex | sed 's#^"\(.*\)"$#\1#')

          echo "\nfilePath:  $filePath"
          echo "regex: $regex"
          echo "valuePrefix:  $valuePrefix"
          echo "value: $value"

          cat ${filePath} | sed -E "s#${regex}#${value}#g" > .tmp/patched-file.yaml
          mv .tmp/patched-file.yaml ${filePath}

        done < <(yq e '.patches[] | [.filePath, .regex, .valuePrefix] | @tsv' .tmp/regex-patches.yaml | sed 's#""#"#g' )

        rm .tmp/regex-patches.yaml

    - name: install set-cargo-version (Optional)
      if: inputs.rust && steps.gate.outputs.continue == 'true'
      run: cargo install set-cargo-version
    
    - name: set cargo version (Optional)
      if: inputs.rust && steps.gate.outputs.continue == 'true'
      run: set-cargo-version Cargo.toml "${{ steps.next.outputs.version }}"

    - name: Commit and push changes if they exist
      if: steps.gate.outputs.continue == 'true'
      run: |
        if [ -z "$(git status --porcelain)" ]; then
          echo "No changes to commit"
          exit 0
        fi
        echo "Committing changes..."
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git commit -am "chore: set version to v${{ steps.next.outputs.version }}"

    - name: Create and push tag
      if: steps.gate.outputs.continue == 'true'
      run: |
        echo "Creating tag v${{ steps.next.outputs.version }}..."
        git tag v${{ steps.next.outputs.version }}
        git push --tags
