name: github-release
on:
  workflow_call:
    inputs:
      changelog:
        type: boolean
        required: false
        default: true
      node:
        type: boolean
        required: false
      regexPatches:
        type: string
        required: false
      runs-on:
        description: 'The type of runner to use for this job. Defaults to "ubuntu-latest".'
        type: string
        default: "ubuntu-latest"
        required: false
      rust:
        type: boolean
        required: false
        default: false
      yqPatches:
        type: string
        required: false
      useDeployKey:
        type: boolean
        required: false
        default: false
      usePAT:
        type: boolean
        required: false
        default: false
    secrets:
      DEPLOY_KEY:
        required: false
      GH_PAT:
        description: 'GitHub Personal Access Token (PAT) with repo,write:packages scopes'
        required: false



jobs:
  ensure-deploy-key:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        if: inputs.useDeployKey
        uses: actions/checkout@v4

      - name: Create bin directory for ubi
        if: inputs.useDeployKey
        shell: bash
        run: |
          mkdir -p /home/runner/bin
          echo "/home/runner/bin" >> $GITHUB_PATH
          echo "Created /home/runner/bin and added to PATH (existing PATH is preserved)"

      - name: Install and configure ubi
        if: inputs.useDeployKey
        shell: bash
        run: |
          curl --silent --location \
              https://raw.githubusercontent.com/houseabsolute/ubi/master/bootstrap/bootstrap-ubi.sh |
              sh
          ubi --version
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Install vnext
        if: inputs.useDeployKey
        run: |
          echo "Installing vnext..."
          ubi --project unbounded-tech/vnext --tag v1.8.0
          vnext --version

      - name: Create Deploy Key and Secret with vnext
        if: inputs.useDeployKey
        run: |
          echo "Creating deploy key '${{ github.event.repository.name }}' and secret 'DEPLOY_KEY'"
          vnext generate-deploy-key --owner "${{ github.repository_owner }}" --name "${{ github.event.repository.name }}"
        shell: bash

  vnext-tag:
    needs: ensure-deploy-key
    name: VNext Tag
    runs-on: ${{ inputs.runs-on }}

    permissions:
      contents: write

    steps:
      - uses: runs-on/action@v2.0.3

      - name: Checkout
        if: ${{ !inputs.useDeployKey && !inputs.usePAT }}
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Checkout w/ Deploy Key
        if: inputs.useDeployKey
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Checkout w/ PAT
        if: inputs.usePAT
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: fetch tags
        run: |
          git fetch --tags

      - name: Create bin directory for ubi
        shell: bash
        run: |
          # Create the directory if it doesn't exist
          mkdir -p /home/runner/bin
          # Add to PATH (yes, this github syntax preserves existing PATH and adds the new directory)
          echo "/home/runner/bin" >> $GITHUB_PATH
          echo "Created /home/runner/bin and added to PATH (existing PATH is preserved)"

      - name: Install and configure ubi
        shell: bash
        run: |
          curl --silent --location \
              https://raw.githubusercontent.com/houseabsolute/ubi/master/bootstrap/bootstrap-ubi.sh |
              sh
          ubi --version
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Install vnext
        run: |
          echo "Installing vnext..."
          ubi --project unbounded-tech/vnext --tag v1.8.0
          vnext --version

      - name: Get current version tag
        id: current
        run: |
          CURRENT=$(vnext --current)
          echo "version=$CURRENT" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT"

      - name: Show version calculation info (for humans)
        run: |
          LOG_LEVEL=debug vnext

      - name: Compute next version using vnext
        id: next
        run: |
          NEXT_VERSION=$(vnext)
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Gate
        id: gate
        run: |
          echo "Current version: ${{ steps.current.outputs.version }}"
          echo "Next version: ${{ steps.next.outputs.version }}"
          echo "Continue?: ${{ steps.current.outputs.version != steps.next.outputs.version }}"
          echo "continue=${{ steps.current.outputs.version != steps.next.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Save CHANGELOG.md
        if: inputs.changelog && steps.gate.outputs.continue == 'true'
        run: |
          echo "Saving changelog to CHANGELOG.md"
          vnext --changelog > CHANGELOG.md
          cat CHANGELOG.md

      - name: Apply YQ Patches (Optional)
        if: inputs.yqPatches && steps.gate.outputs.continue == 'true'
        run: |
          echo "Applying yq patches..."
          mkdir -p .tmp
          touch .tmp/yq-patches.yaml
          echo "${{ inputs.yqPatches }}" >> .tmp/yq-patches.yaml
          echo "TEMP FILE:"
          cat .tmp/yq-patches.yaml
          while IFS=$'\t' read -r filePath selector valuePrefix _; do
            echo "\nfilePath:  $filePath"
            echo "selector: $selector"
            echo "valuePrefix:  $valuePrefix"
            value=$(echo "${valuePrefix}${{ steps.next.outputs.version }}")
            selector=$(echo $selector | sed 's/^"\(.*\)"$/\1/')
            echo "Running: yq -i '${selector} = \"${value}\"' ${filePath}\n\n"
            yq -i "${selector} = \"${value}\"" ${filePath}
          done < <(yq e '.patches[] | [.filePath, .selector, .valuePrefix] | @tsv' .tmp/yq-patches.yaml | sed 's/""/"/g' )
          rm .tmp/yq-patches.yaml

      - name: Apply Regex Patches (Optional)
        if: inputs.regexPatches && steps.gate.outputs.continue == 'true'
        run: |
          echo "Applying regex patches..."
          mkdir -p .tmp
          touch .tmp/regex-patches.yaml
          echo "${{ inputs.regexPatches }}" > .tmp/regex-patches.yaml
          echo "TEMP FILE:"
          cat .tmp/regex-patches.yaml
          while IFS=$'\t' read -r filePath regex valuePrefix _; do
            value=$(echo "${valuePrefix}${{ steps.next.outputs.version }}")
            regex=$(echo $regex | sed 's#^"\(.*\)"$#\1#')
            echo "\nfilePath:  $filePath"
            echo "regex: $regex"
            echo "valuePrefix:  $valuePrefix"
            echo "value: $value"
            cat ${filePath} | sed -E "s#${regex}#${value}#g" > .tmp/patched-file.yaml
            mv .tmp/patched-file.yaml ${filePath}
          done < <(yq e '.patches[] | [.filePath, .regex, .valuePrefix] | @tsv' .tmp/regex-patches.yaml | sed 's#""#"#g' )
          rm .tmp/regex-patches.yaml

      - name: Node package version bump
        if: inputs.node && steps.gate.outputs.continue == 'true'
        run: npm version ${{ steps.next.outputs.version }} --git-tag-version false

      - name: set cargo version (Optional)
        if: inputs.rust && steps.gate.outputs.continue == 'true'
        run: |
          sed -i -E 's|^(version = ")[^"]+(")|\1${{ steps.next.outputs.version }}\2|' Cargo.toml
          cargo generate-lockfile

      - name: Commit and push changes if they exist
        if: steps.gate.outputs.continue == 'true'
        run: |
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit"
            exit 0
          fi
          echo "Committing changes..."
          git add -A
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -am "chore: set version to v${{ steps.next.outputs.version }}"

      - name: Create and push tag
        if: steps.gate.outputs.continue == 'true'
        run: |
          echo "Creating tag v${{ steps.next.outputs.version }}..."
          git tag v${{ steps.next.outputs.version }}
          git push --tags